#! /bin/sh
#
# If these # comments don't work, trim them.  Don't worry about any other
# shell scripts, Configure will trim # comments from them for you.
#
# (If you are trying to port this package to a machine without sh, I would
# suggest you cut out the prototypical config.h from the end of Configure
# and edit it to reflect your system.  Some packages may include samples
# of config.h for certain machines, so you might look for one of those.)
#
# $Header: Head.U,v 2.0 88/06/28 23:13:13 lwall Locked $
#
# Yes, you may rip this off to use in other distribution packages.
# (Note: this Configure script was generated automatically.  Rather than
# working with this copy of Configure, you may wish to get metaconfig.)

: sanity checks
PATH='.:/bin:/usr/bin:/usr/local/bin:/usr/ucb:/usr/local:/usr/lbin:/etc:/usr/new:/usr/new/bin:/usr/nbin'
export PATH || (echo "OOPS, this isn't sh.  Desperation time.  I will feed myself to sh."; sh $0; kill $$)

if test ! -t 0; then
    echo "Say 'sh Configure', not 'sh <Configure'"
    exit 1
fi

(alias) >/dev/null 2>&1 && \
    echo "(I see you are using the Korn shell.  Some ksh's blow up on Configure," && \
    echo "especially on exotic machines.  If yours does, try the Bourne shell instead.)"

if test ! -d ../UU; then
    if test ! -d UU; then
	mkdir UU
    fi
    cd UU
fi

case "$1" in
-d) shift; fastread='yes';;
esac

d_eunice=''
eunicefix=''
define=''
loclist=''
expr=''
sed=''
echo=''
cat=''
rm=''
mv=''
cp=''
tail=''
tr=''
mkdir=''
sort=''
uniq=''
grep=''
trylist=''
test=''
inews=''
egrep=''
more=''
pg=''
Mcc=''
vi=''
mailx=''
mail=''
cpp=''
perl=''
contains=''
d_index=''
libc=''
n=''
c=''
package=''
spitshell=''
shsharp=''
sharpbang=''
startsh=''
d_flex=''
flexcomment=''
d_lex8=''
lex8comment=''
d_perl=''
perlcomment=''
perlloc=''
dpi=''
gmw=''
gmwfontpath=''
gmwfonts=''
gmwfontlist=''
jtex=''
texfontpath=''
jtexfonts=''
jtexfontlist=''
localfont=''
lw=''
lwfonts=''
lwfontlist=''
sharp=''
sharpfontpath=''
sharpfonts=''
sharpfontlist=''
sharpoa=''
sharpoafontpath=''
sharpoafonts=''
sharpoafontlist=''
x11=''
xfontpath=''
xfonts=''
xfontlist=''
CONFIG=''
: set package name
package=kanjips

echo " "
echo "Beginning of configuration questions for $package kit."
: Eunice requires " " instead of "", can you believe it
echo " "

define='define'
undef='undef'
libpth='/usr/lib /usr/local/lib /lib'
smallmach='pdp11 i8086 z8000 i80286 iAPX286'
rmlist='kit[1-9]isdone kit[1-9][0-9]isdone'
trap 'echo " "; rm -f $rmlist; exit 1' 1 2 3

: We must find out about Eunice early
eunicefix=':'
if test -f /etc/unixtovms; then
    eunicefix=/etc/unixtovms
fi
if test -f /etc/unixtovms.exe; then
    eunicefix=/etc/unixtovms.exe
fi

: Now test for existence of everything in MANIFEST

echo "First let's make sure your kit is complete.  Checking..."
(cd ..; cat `awk 'NR>4{print $1}' MANIFEST` >/dev/null || kill $$)
echo " "

attrlist="mc68000 sun gcos unix ibm gimpel interdata tss os mert pyr"
attrlist="$attrlist vax pdp11 i8086 z8000 u3b2 u3b5 u3b20 u3b200"
attrlist="$attrlist hpux hp9000s300 hp9000s500 hp9000s800"
attrlist="$attrlist ns32000 ns16000 iAPX286 mc300 mc500 mc700 sparc"
attrlist="$attrlist nsc32000 sinix xenix venix posix ansi M_XENIX"
attrlist="$attrlist $mc68k __STDC__ UTS M_I8086 M_I186 M_I286 M_I386"
pth="/usr/ucb /bin /usr/bin /usr/local /usr/local/bin /usr/lbin /etc /usr/lib /lib /usr/local/lib"
d_newshome="/usr/NeWS"
defvoidused=7

: some greps do not return status, grrr.
echo "grimblepritz" >grimble
if grep blurfldyick grimble >/dev/null 2>&1 ; then
    contains=contains
elif grep grimblepritz grimble >/dev/null 2>&1 ; then
    contains=grep
else
    contains=contains
fi
rm -f grimble
: the following should work in any shell
case "$contains" in
contains*)
    echo " "
    echo "AGH!  Grep doesn't return a status.  Attempting remedial action."
    cat >contains <<'EOSS'
grep "$1" "$2" >.greptmp && cat .greptmp && test -s .greptmp
EOSS
chmod +x contains
esac

: first determine how to suppress newline on echo command
echo "Checking echo to see how to suppress newlines..."
(echo "hi there\c" ; echo " ") >.echotmp
if $contains c .echotmp >/dev/null 2>&1 ; then
    echo "...using -n."
    n='-n'
    c=''
else
    cat <<'EOM'
...using \c
EOM
    n=''
    c='\c'
fi
echo $n "Type carriage return to continue.  Your cursor should be here-->$c"
read ans
rm -f .echotmp

: now set up to do reads with possible shell escape and default assignment
cat <<EOSC >myread
case "\$fastread" in
yes) ans=''; echo " " ;;
*) ans='!';;
esac
while expr "X\$ans" : "X!" >/dev/null; do
    read ans
    case "\$ans" in
    !)
	sh
	echo " "
	echo $n "\$rp $c"
	;;
    !*)
	set \`expr "X\$ans" : "X!\(.*\)\$"\`
	sh -c "\$*"
	echo " "
	echo $n "\$rp $c"
	;;
    esac
done
rp='Your answer:'
case "\$ans" in
'') ans="\$dflt";;
esac
EOSC

: general instructions
cat <<EOH
 
This installation shell script will examine your system and ask you questions
to determine how the $package package should be installed.  If you get stuck
on a question, you may use a ! shell escape to start a subshell or execute
a command.  Many of the questions will have default answers in square
brackets--typing carriage return will give you the default.

On some of the questions which ask for file or directory names you are
allowed to use the ~name construct to specify the login directory belonging
to "name", even if you don't have a shell which knows about that.  Questions
where this is allowed will be marked "(~name ok)".

EOH
rp="[Type carriage return to continue]"
echo $n "$rp $c"
. myread
cat <<EOH

Much effort has been expended to ensure that this shell script will run
on any Unix system.  If despite that it blows up on you, your best bet is
to edit Configure and run it again. Also, let me (lwall@jpl-devvax.jpl.nasa.gov)
know how I blew it.  If you can't run Configure for some reason, you'll have
to generate a config.sh file by hand.

This installation script affects things in two ways: 1) it may do direct
variable substitutions on some of the files included in this kit, and
2) it builds a config.h file for inclusion in C programs.  You may edit
any of these files as the need arises after running this script.

If you make a mistake on a question, there is no easy way to back up to it
currently.  The easiest thing to do is to edit config.sh and rerun all the
SH files.  Configure will offer to let you do this before it runs the SH files.

EOH
rp="[Type carriage return to continue]"
echo $n "$rp $c"
. myread

: get old answers, if there is a config file out there
if test -f ../config.sh; then
    echo " "
    dflt=y
    rp="I see a config.sh file.  Did Configure make it on THIS system? [$dflt]"
    echo $n "$rp $c"
    . myread
    case "$ans" in
    n*) echo "OK, I'll ignore it.";;
    *)  echo "Fetching default answers from your old config.sh file..."
	tmp="$n"
	ans="$c"
        . ../config.sh
	n="$tmp"
	c="$ans"
	;;
    esac
fi

: find out where common programs are
echo " "
echo "Locating common programs..."
cat <<EOSC >loc
$startsh
case \$# in
0) exit 1;;
esac
thing=\$1
shift
dflt=\$1
shift
for dir in \$*; do
    case "\$thing" in
    .)
	if test -d \$dir/\$thing; then
	    echo \$dir
	    exit 0
	fi
	;;
    *)
	if test -f \$dir/\$thing; then
	    echo \$dir/\$thing
	    exit 0
	elif test -f \$dir/\$thing.exe; then
	    : on Eunice apparently
	    echo \$dir/\$thing
	    exit 0
	fi
	;;
    esac
done
echo \$dflt
exit 1
EOSC
chmod +x loc
$eunicefix loc
loclist="
expr
sed
echo
rm
grep
"
trylist="
test
more
"
for file in $loclist; do
    xxx=`loc $file $file $pth`
    eval $file=$xxx
    eval _$file=$xxx
    case "$xxx" in
    /*)
	echo $file is in $xxx.
	;;
    *)
	echo "I don't know where $file is.  I hope it's in everyone's PATH."
	;;
    esac
done
echo " "
echo "Don't worry if any of the following aren't found..."
ans=offhand
for file in $trylist; do
    xxx=`loc $file $file $pth`
    eval $file=$xxx
    eval _$file=$xxx
    case "$xxx" in
    /*)
	echo $file is in $xxx.
	;;
    *)
	echo "I don't see $file out there, $ans."
	ans=either
	;;
    esac
done
case "$egrep" in
egrep)
    echo "Substituting grep for egrep."
    egrep=$grep
    ;;
esac
case "$test" in
test)
    echo "Hopefully test is built into your sh."
    ;;
/bin/test)
    if sh -c "PATH= test true" >/dev/null 2>&1; then
	echo "Using the test built into your sh."
	test=test
    fi
    ;;
*)
    test=test
    ;;
esac
case "$echo" in
echo)
    echo "Hopefully echo is built into your sh."
    ;;
/bin/echo)
    echo " "
    echo "Checking compatibility between /bin/echo and builtin echo (if any)..."
    $echo $n "hi there$c" >foo1
    echo $n "hi there$c" >foo2
    if cmp foo1 foo2 >/dev/null 2>&1; then
	echo "They are compatible.  In fact, they may be identical."
    else
	case "$n" in
	'-n') n='' c='\c' ans='\c' ;;
	*) n='-n' c='' ans='-n' ;;
	esac
	cat <<FOO
They are not compatible!  You are probably running ksh on a non-USG system.
I'll have to use /bin/echo instead of the builtin, since Bourne shell doesn't
have echo built in and we may have to run some Bourne shell scripts.  That
means I'll have to use $ans to suppress newlines now.  Life is ridiculous.

FOO
	rp="Your cursor should be here-->"
	$echo $n "$rp$c"
	. myread
    fi
    $rm -f foo1 foo2
    ;;
*)
    : cross your fingers
    echo=echo
    ;;
esac
rmlist="$rmlist loc"

: get list of predefined functions in a handy place
echo " "
if test -f /lib/libc.a; then
    echo "Your C library is in /lib/libc.a.  You're normal."
    libc=/lib/libc.a
else
    ans=`loc libc.a blurfl/dyick $libpth`
    if test ! -f $ans; then
	ans=`loc clib blurfl/dyick $libpth`
    fi
    if test ! -f $ans; then
	ans=`loc libc blurfl/dyick $libpth`
    fi
    if test -f $ans; then
	echo "Your C library is in $ans, of all places."
	libc=$ans
    else
	if test -f "$libc"; then
	    echo "Your C library is in $libc, like you said before."
	else
	    cat <<EOM
 
I can't seem to find your C library.  I've looked in the following places:

	$libpth

None of these seems to contain your C library.  What is the full name
EOM
	    dflt=None
	    $echo $n "of your C library? $c"
	    rp='C library full name?'
	    . myread
	    libc="$ans"
	fi
    fi
fi
echo " "
$echo $n "Extracting names from $libc for later perusal...$c"
nm $libc 2>/dev/null >libc.tmp
sed -n -e 's/^.* [AT] _//p' -e 's/^.* [AT] //p' <libc.tmp >libc.list
if $contains '^printf$' libc.list >/dev/null 2>&1; then
    echo "done"
else
    sed -n -e 's/^.* D _//p' -e 's/^.* D //p' <libc.tmp >libc.list
    $contains '^printf$' libc.list >/dev/null 2>&1 || \
       sed -n -e 's/^_//' \
	      -e 's/^\([a-zA-Z_0-9]*\).*xtern.*text.*/\1/p' <libc.tmp >libc.list
    if $contains '^printf$' libc.list >/dev/null 2>&1; then
	echo "done"
    else
	echo " "
	echo "nm didn't seem to work right."
	echo "Trying ar instead..."
	if ar t $libc > libc.tmp; then
	    sed -e 's/\.o$//' < libc.tmp > libc.list
	    echo "Ok."
	else
	    echo "ar didn't seem to work right."
	    echo "Maybe this is a Cray...trying bld instead..."
	    if bld t $libc | sed -e 's/.*\///' -e 's/\.o:.*$//' > libc.list; then
		echo "Ok."
	    else
	    	echo "That didn't work either.  Giving up."
	    	exit 1
	    fi
	fi
    fi
fi
rmlist="$rmlist libc.tmp libc.list"

: make some quick guesses about what we are up against
echo " "
$echo $n "Hmm...  $c"
if $contains SIGTSTP /usr/include/signal.h >/dev/null 2>&1 ; then
    echo "Looks kind of like a BSD system, but we'll see..."
    echo exit 0 >bsd
    echo exit 1 >usg
    echo exit 1 >v7
elif $contains '^fcntl$' libc.list >/dev/null 2>&1 ; then
    echo "Looks kind of like a USG system, but we'll see..."
    echo exit 1 >bsd
    echo exit 0 >usg
    echo exit 1 >v7
else
    echo "Looks kind of like a version 7 system, but we'll see..."
    echo exit 1 >bsd
    echo exit 1 >usg
    echo exit 0 >v7
fi
if $contains '^vmssystem$' libc.list >/dev/null 2>&1 ; then
    cat <<'EOI'
There is, however, a strange, musty smell in the air that reminds me of
something...hmm...yes...I've got it...there's a VMS nearby, or I'm a Blit.
EOI
    echo "exit 0" >eunice
    eunicefix=unixtovms
    d_eunice="$define"
: it so happens the Eunice I know will not run shell scripts in Unix format
else
    echo " "
    echo "Congratulations.  You aren't running Eunice."
    eunicefix=':'
    d_eunice="$undef"
    echo "exit 1" >eunice
fi
if test -f /xenix; then
    echo "Actually, this looks more like a XENIX system..."
    echo "exit 0" >xenix
else
    echo " "
    echo "It's not Xenix..."
    echo "exit 1" >xenix
fi
chmod +x xenix
$eunicefix xenix
if test -f /venix; then
    echo "Actually, this looks more like a VENIX system..."
    echo "exit 0" >venix
else
    echo " "
    if xenix; then
	: null
    else
	echo "Nor is it Venix..."
    fi
    echo "exit 1" >venix
fi
chmod +x bsd usg v7 eunice venix
$eunicefix bsd usg v7 eunice venix
rmlist="$rmlist bsd usg v7 eunice venix xenix"

: see if sh knows # comments
echo " "
echo "Checking your sh to see if it knows about # comments..."
if sh -c '#' >/dev/null 2>&1 ; then
    echo "Your sh handles # comments correctly."
    shsharp=true
    spitshell=cat
    echo " "
    echo "Okay, let's see if #! works on this system..."
    echo "#!/bin/echo hi" > try
    $eunicefix try
    chmod +x try
    try > today
    if $contains hi today >/dev/null 2>&1; then
	echo "It does."
	sharpbang='#!'
    else
	echo "#! /bin/echo hi" > try
	$eunicefix try
	chmod +x try
	try > today
	if test -s today; then
	    echo "It does."
	    sharpbang='#! '
	else
	    echo "It doesn't."
	    sharpbang=': use '
	fi
    fi
else
    echo "Your sh doesn't grok # comments--I will strip them later on."
    shsharp=false
    echo "exec grep -v '^#'" >spitshell
    chmod +x spitshell
    $eunicefix spitshell
    spitshell=`pwd`/spitshell
    echo "I presume that if # doesn't work, #! won't work either!"
    sharpbang=': use '
fi

: figure out how to guarantee sh startup
echo " "
echo "Checking out how to guarantee sh startup..."
startsh=$sharpbang'/bin/sh'
echo "Let's see if '$startsh' works..."
cat >try <<EOSS
$startsh
set abc
test "$?abc" != 1
EOSS

chmod +x try
$eunicefix try
if try; then
    echo "Yup, it does."
else
    echo "Nope.  You may have to fix up the shell scripts to make sure sh runs them."
fi
rm -f try today

: index or strcpy
echo " "
case "$d_index" in
n) dflt=n;;
*) dflt=y;;
esac
if $contains '^index$' libc.list >/dev/null 2>&1 ; then
    if $contains '^strchr$' libc.list >/dev/null 2>&1 ; then
	echo "Your system has both index() and strchr().  Shall I use"
	rp="index() rather than strchr()? [$dflt]"
	$echo $n "$rp $c"
	. myread
	case "$ans" in
	    n*) d_index="$define" ;;
	    *)  d_index="$undef" ;;
	esac
    else
	d_index="$undef"
	echo "index() found."
    fi
else
    if $contains '^strchr$' libc.list >/dev/null 2>&1 ; then
	d_index="$define"
	echo "strchr() found."
    else
	echo "No index() or strchr() found!"
	d_index="$undef"
    fi
fi

: set up shell script to do ~ expansion
cat >filexp <<EOSS
$startsh
: expand filename
case "\$1" in
 ~/*|~)
    echo \$1 | $sed "s|~|\${HOME-\$LOGDIR}|"
    ;;
 ~*)
    if $test -f /bin/csh; then
	/bin/csh -f -c "glob \$1"
	echo ""
    else
	name=\`$expr x\$1 : '..\([^/]*\)'\`
	dir=\`$sed -n -e "/^\${name}:/{s/^[^:]*:[^:]*:[^:]*:[^:]*:[^:]*:\([^:]*\).*"'\$'"/\1/" -e p -e q -e '}' </etc/passwd\`
	if $test ! -d "\$dir"; then
	    me=\`basename \$0\`
	    echo "\$me: can't locate home directory for: \$name" >&2
	    exit 1
	fi
	case "\$1" in
	*/*)
	    echo \$dir/\`$expr x\$1 : '..[^/]*/\(.*\)'\`
	    ;;
	*)
	    echo \$dir
	    ;;
	esac
    fi
    ;;
*)
    echo \$1
    ;;
esac
EOSS
chmod +x filexp
$eunicefix filexp

: ask DPI of printer
case "$dpi" in
'')
    dflt=300
    ;;
*)  dflt="$dpi"
    ;;
esac
cont=true
while $test "$cont" ; do
	echo " "
	rp='PostScript$B%W%j%s%?$N2rA|EY$O2?(JDPI$B$G$9$+!)(J'"[$dflt]"
	$echo $n "$rp $c"
	. myread
	dpi="$ans"
	case "$dpi" in
	'') cont=true ;;
	*)  cont='';;
	esac
done
: ask whether GMW fonts exist
cont=''
case "$gmw" in
1)  dflt=y ;;
*)  dflt=n ;;
esac
echo " "
rp='GMW$B$N%U%)%s%H$OM-$j$^$9$+(J? '"[$dflt]"
$echo $n "$rp $c"
. myread
case "$ans" in
	y*) 	gmw=1
		cont=true;;
	*)	gmw=0;;
esac
if $test "$cont" ; then
case "$gmwfontpath" in
'')
    dflt="/usr/local/gmw/font"
    ;;
*)  dflt="$gmwfontpath"
    ;;
esac
cont=true
while $test "$cont" ; do
	echo " "
	rp='GMW$B$N%U%)%s%H$O$I$3$KM-$j$^$9$+(J? '"[$dflt]"
	$echo $n "$rp $c"
	. myread
	gmwfontpath="$ans"
	dirs=$gmwfontpath
    	while test "$dirs" != "" ; do
		case $dirs in
			*:*)	
				dir=`$expr $dirs : '.*:\([^:]*\)'`
				dirs=`echo $dirs | $sed -e 's/:[^:]*$//'` ;;
			*)
				dir=$dirs
				dirs="" ;;
		esac
		case $dir in
			/*)	if test -d $dir; then
					cont=''
					echo " "
				else
					dflt=n
					$echo "$dir"'$B$H$$$&%G%#%l%/%H%j$OB8:_$7$^$;$s!#(J'
					rp='$B$=$N$^$^<B9T$7$^$9$+(J?'" [$dflt]"
					$echo $n "$rp $c"
					. myread
					dflt=''
					case "$ans" in
						y*) cont='';;
						*)  dirs='';;
					esac
					echo " "
				fi
				;;
			*) echo '$B@dBP%Q%9$G;XDj$7$F2<$5$$!#(J'
				dirs=''
				echo " "
				;;
		esac
	done
done
case "$gmwfonts" in
'')
    dflt="kan14"
    ;;
*)  dflt="$gmwfonts"
    ;;
esac
cont=true
while $test "$cont" ; do
    rp='GMW$B$G;H$($k%U%)%s%HL>$r;XDj$7$F2<$5$$!#(J'"[$dflt]"
    $echo $n "$rp $c"
    . myread
    gmwfonts="$ans"
    case "$ans" in
    '') cont=true ;;
    *)  cont='';;
    esac
done
gmwfontlist=`$echo $ans | $sed -e 's/^[ 	]*,//' \
			   -e 's/,[ 	]*$//' \
			   -e 's/[ 	][ 	]*//g' \
			   -e 's/,/","/g' \
			   -e 's/.*/"&"/' `
fi
: ask whether JTeX fonts exist
cont=''
case "$jtex" in
1)  dflt=y ;;
*)  dflt=n ;;
esac
echo " "
rp='JTeX$@$N%U%)%s%H$OM-$j$^$9$+(J? '"[$dflt]"
$echo $n "$rp $c"
. myread
case "$ans" in
	y*) 	jtex=1
		cont=true;;
	*)	jtex=0;;
esac
if $test "$cont" ; then
case "$texfontpath" in
'')
    dflt="/usr/lib/tex/fonts:/usr/lib/tex/jfonts"
    ;;
*)  dflt="$texfontpath"
    ;;
esac
cont=true
while $test "$cont" ; do
	echo " "
	rp='JTeX$@$N%U%)%s%H$O$I$3$KM-$j$^$9$+(J? '"[$dflt]"
	$echo $n "$rp $c"
	. myread
	texfontpath="$ans"
	dirs=$texfontpath
    	while $test "$dirs" != "" ; do
		case $dirs in
			*:*)	
				dir=`$expr $dirs : '.*:\([^:]*\)'`
				dirs=`echo $dirs | $sed -e 's/:[^:]*$//'` ;;
			*)
				dir=$dirs
				dirs="" ;;
		esac
		case $dir in
			/*)	if $test -d $dir; then
					cont=''
					echo " "
				else
					dflt=n
					$echo "$dir"'$@$H$$$&%G%#%l%/%H%j$OB8:_$7$^$;$s!#(J'
					rp='$@$=$N$^$^<B9T$7$^$9$+(J?'" [$dflt]"
					$echo $n "$rp $c"
					. myread
					dflt=''
					case "$ans" in
						y*) cont='';;
						*)  dirs='';;
					esac
					echo " "
				fi
				;;
			*) echo '$@@dBP%Q%9$G;XDj$7$F2<$5$$!#(J'
				dirs=''
				echo " "
				;;
		esac
	done
done
case "$jtexfonts" in
'')
    dflt="jisj24"
    ;;
*)  dflt="$jtexfonts"
    ;;
esac
cont=true
while $test "$cont" ; do
    rp='JTeX$@$G;H$($k%U%)%s%HL>$r;XDj$7$F2<$5$$!#(J'"[$dflt]"
    $echo $n "$rp $c"
    . myread
    jtexfonts="$ans"
    case "$ans" in
    '') cont=true ;;
    *)  cont='';;
    esac
done
jtexfontlist=`$echo $ans | $sed -e 's/^[ 	]*,//' \
			   -e 's/,[ 	]*$//' \
			   -e 's/[ 	][ 	]*//g' \
			   -e 's/,/","/g' \
			   -e 's/.*/"&"/' `
fi
: ask local font directory
case "$localfont" in
'')
    localfont="/usr/local/font"
    ;;
*)  localfont="$localfont"
    ;;
esac
cont=true
while $test "$cont" ; do
	dflt="$localfont"
	echo " "
	rp='$B%m!<%+%k$J%U%)%s%H$O$I$3$KM-$j$^$9$+!)(J'"[$dflt]"
	$echo $n "$rp $c"
	. myread
	cont=true;
	case "$ans" in
	'') ;;
	*) localfont=$ans;;
	esac
	if $test -d $localfont; then
		cont=''
	else
		dflt=n
		$echo "$localfont"'$B$H$$$&%G%#%l%/%H%j$OB8:_$7$^$;$s!#(J'
		rp='$B$=$N$^$^<B9T$7$^$9$+(J?'" [$dflt]"
		$echo $n "$rp $c"
		. myread
		case "$ans" in
			y*) cont='';;
			*)  localfont='';;
		esac
	fi
done
: ask whether X fonts exist
cont=''
case "$x11" in
1)  dflt=y ;;
*)  dflt=n ;;
esac
echo " "
rp='X11$B$N(Jbdf$B%U%)%s%H$OM-$j$^$9$+(J? '"[$dflt]"
$echo $n "$rp $c"
. myread
case "$ans" in
	y*) 	x11=1
		cont=true;;
	*)	x11=0;;
esac
if $test "$cont" ; then
case "$xfontpath" in
'')
    dflt="/usr/new/X11/lib/fonts/bdf"
    ;;
*)  dflt="$xfontpath"
    ;;
esac
cont=true
while $test "$cont" ; do
	echo " "
	rp='bdf$B%U%)%s%H$O$I$3$KM-$j$^$9$+(J? '"[$dflt]"
	$echo $n "$rp $c"
	. myread
	xfontpath="$ans"
	dirs=$xfontpath
    	while test "$dirs" != "" ; do
		case $dirs in
			*:*)	
				dir=`$expr $dirs : '.*:\([^:]*\)'`
				dirs=`echo $dirs | $sed -e 's/:[^:]*$//'` ;;
			*)
				dir=$dirs
				dirs="" ;;
		esac
		case $dir in
			/*)	if test -d $dir; then
					cont=''
					echo " "
				else
					dflt=n
					$echo "$dir"'$B$H$$$&%G%#%l%/%H%j$OB8:_$7$^$;$s!#(J'
					rp='$B$=$N$^$^<B9T$7$^$9$+(J?'" [$dflt]"
					$echo $n "$rp $c"
					. myread
					dflt=''
					case "$ans" in
						y*) cont='';;
						*)  dirs='';;
					esac
					echo " "
				fi
				;;
			*) echo '$B@dBP%Q%9$G;XDj$7$F2<$5$$!#(J'
				dirs=''
				echo " "
				;;
		esac
	done
done
case "$xfonts" in
'')
    dflt="k14"
    ;;
*)  dflt="$xfonts"
    ;;
esac
cont=true
while $test "$cont" ; do
    rp='bdf$B%U%)%s%HL>$r;XDj$7$F2<$5$$!#(J'"[$dflt]"
    $echo $n "$rp $c"
    . myread
    xfonts="$ans"
    case "$ans" in
    '') cont=true ;;
    *)  cont='';;
    esac
done
xfontlist=`$echo $ans | $sed -e 's/^[ 	]*,//' \
			   -e 's/,[ 	]*$//' \
			   -e 's/[ 	][ 	]*//g' \
			   -e 's/,/","/g' \
			   -e 's/.*/"&"/' `
fi
: ask whether SHARP fonts exist
cont=''
case "$sharp" in
1)  dflt=y ;;
*)  dflt=n ;;
esac
echo " "
rp='SHARP$B@=$N%"%&%H%i%$%s%U%)%s%H$OM-$j$^$9$+(J? '"[$dflt]"
$echo $n "$rp $c"
. myread
case "$ans" in
	y*) 	sharp=1
		cont=true;;
	*)	sharp=0;;
esac
if $test "$cont" ; then
case "$sharpfontpath" in
'')
    dflt="/usr/local/font"
    ;;
*)  dflt="$sharpfontpath"
    ;;
esac
cont=true
while $test "$cont" ; do
	echo " "
	rp='$B%"%&%H%i%$%s%U%)%s%H$O$I$3$KM-$j$^$9$+(J? '"[$dflt]"
	$echo $n "$rp $c"
	. myread
	sharpfontpath="$ans"
	dirs=$sharpfontpath
    	while test "$dirs" != "" ; do
		case $dirs in
			*:*)	
				dir=`$expr $dirs : '.*:\([^:]*\)'`
				dirs=`echo $dirs | $sed -e 's/:[^:]*$//'` ;;
			*)
				dir=$dirs
				dirs="" ;;
		esac
		case $dir in
			/*)	if test -d $dir; then
					cont=''
					echo " "
				else
					dflt=n
					$echo "$dir"'$B$H$$$&%G%#%l%/%H%j$OB8:_$7$^$;$s!#(J'
					rp='$B$=$N$^$^<B9T$7$^$9$+(J?'" [$dflt]"
					$echo $n "$rp $c"
					. myread
					dflt=''
					case "$ans" in
						y*) cont='';;
						*)  dirs='';;
					esac
					echo " "
				fi
				;;
			*) echo '$B@dBP%Q%9$G;XDj$7$F2<$5$$!#(J'
				dirs=''
				echo " "
				;;
		esac
	done
done
case "$sharpfonts" in
'')
    dflt="bmnkl"
    ;;
*)  dflt="$sharpfonts"
    ;;
esac
cont=true
while $test "$cont" ; do
    rp='$B%"%&%H%i%$%s%U%)%s%H$G;H$($k%U%)%s%HL>$r;XDj$7$F2<$5$$!#(J'"[$dflt]"
    $echo $n "$rp $c"
    . myread
    sharpfonts="$ans"
    case "$ans" in
    '') cont=true ;;
    *)  cont='';;
    esac
done
sharpfontlist=`$echo $ans | $sed -e 's/^[ 	]*,//' \
			   -e 's/,[ 	]*$//' \
			   -e 's/[ 	][ 	]*//g' \
			   -e 's/,/","/g' \
			   -e 's/.*/"&"/' `
fi
: ask whether SHARPOA fonts exist
cont=''
case "$sharpoa" in
1)  dflt=y ;;
*)  dflt=n ;;
esac
echo " "
rp='SHARP IX/OA$B%7%j!<%:$N%U%)%s%H%Q%?!<%s%U%!%$%k$OM-$j$^$9$+(J? '"[$dflt]"
$echo $n "$rp $c"
. myread
case "$ans" in
	y*) 	sharpoa=1
		cont=true;;
	*)	sharpoa=0;;
esac
if $test "$cont" ; then
case "$sharpoafontpath" in
'')
    dflt="/ext/knj"
    ;;
*)  dflt="$sharpoafontpath"
    ;;
esac
cont=true
while $test "$cont" ; do
	echo " "
	rp='$B%U%)%s%H%Q%?!<%s%U%!%$%k$O$I$3$KM-$j$^$9$+(J? '"[$dflt]"
	$echo $n "$rp $c"
	. myread
	sharpoafontpath="$ans"
	dirs=$sharpoafontpath
    	while test "$dirs" != "" ; do
		case $dirs in
			*:*)	
				dir=`$expr $dirs : '.*:\([^:]*\)'`
				dirs=`echo $dirs | $sed -e 's/:[^:]*$//'` ;;
			*)
				dir=$dirs
				dirs="" ;;
		esac
		case $dir in
			/*)	if test -d $dir; then
					cont=''
					echo " "
				else
					dflt=n
					$echo "$dir"'$B$H$$$&%G%#%l%/%H%j$OB8:_$7$^$;$s!#(J'
					rp='$B$=$N$^$^<B9T$7$^$9$+(J?'" [$dflt]"
					$echo $n "$rp $c"
					. myread
					dflt=''
					case "$ans" in
						y*) cont='';;
						*)  dirs='';;
					esac
					echo " "
				fi
				;;
			*) echo '$B@dBP%Q%9$G;XDj$7$F2<$5$$!#(J'
				dirs=''
				echo " "
				;;
		esac
	done
done
case "$sharpoafonts" in
'')
    dflt="ptrn16,ptrn24"
    ;;
*)  dflt="$sharpoafonts"
    ;;
esac
cont=true
while $test "$cont" ; do
    rp='$B%Q%?!<%s%U%!%$%kL>$r;XDj$7$F2<$5$$!#(J'"[$dflt]"
    $echo $n "$rp $c"
    . myread
    sharpoafonts="$ans"
    case "$ans" in
    '') cont=true ;;
    *)  cont='';;
    esac
done
sharpoafontlist=`$echo $ans | $sed -e 's/^[ 	]*,//' \
			   -e 's/,[ 	]*$//' \
			   -e 's/[ 	][ 	]*//g' \
			   -e 's/,/","/g' \
			   -e 's/.*/"&"/' `
fi
: ask PostScript font names
echo " "
case "$lwfonts" in
'')
    dflt="Times,Helvetica,Courier,Symbol"
    ;;
*)  dflt="$lwfonts"
    ;;
esac
cont=true
while $test "$cont" ; do
    rp='$B%W%j%s%?FbB"$N%U%)%s%HL>$r;XDj$7$F2<$5$$!#(J'"[$dflt]"
    $echo $n "$rp $c"
    . myread
    lwfonts="$ans"
    case "$ans" in
    '') cont=true ;;
    *)  cont='';;
    esac
done
lwfontlist=`$echo $ans | $sed -e 's/^[ 	]*,//' \
			   -e 's/,[ 	]*$//' \
			   -e 's/[ 	][ 	]*//g' \
			   -e 's/,/","/g' \
			   -e 's/.*/"&"/' `
: check whether "flex" exists
prog=Flex
d_flex="$undef"
flexcomment="#"
for dir in $pth ; do
	if $test -f $dir/$prog; then
		d_flex="$define"
		flexcomment=""
		break
	fi
done
: check whether "lex8" exists
prog=lex8
d_lex8="$undef"
lex8comment="#"
for dir in $pth ; do
	if $test -f $dir/$prog; then
		d_lex8="$define"
		lex8comment=""
		break
	fi
done
: check whether "perl" exists
prog=perl
d_perl="$undef"
perlcomment="#"
for dir in $pth ; do
	if $test -f $dir/$prog; then
		d_perl="$define"
		perlcomment=""
		perlloc=$dir/$prog
		break
	fi
done
while $test "$perlloc" = '' ; do
	case "$perlloc" in
	'')
	    dflt="none"
	    ;;
	*)  dflt="$perlloc"
	    ;;
	esac
	echo " "
	rp='perl(2.14$@0J9_$N$b$N(J)$@$N@dBP%Q%9$r;XDj$7$F2<$5$$(J '"[$dflt]"
	$echo $n "$rp $c"
	. myread
	perlloc="$ans"
	case $perlloc in
		/*)	if $test ! -f $perlloc; then
				echo "$perlloc"'$@$OB8:_$7$^$;$s!#(J'
				perlloc=''
			else
				perlcomment=""
			fi ;;
		*)	perlloc='' ;;
	esac
done
echo " "
echo "End of configuration questions."
echo " "

: create config.sh file
echo " "
if test -d ../UU; then
    cd ..
fi
echo "Creating config.sh..."
$spitshell <<EOT >config.sh
$startsh
# config.sh
# This file was produced by running the Configure script.

d_eunice='$d_eunice'
eunicefix='$eunicefix'
define='$define'
loclist='$loclist'
expr='$expr'
sed='$sed'
echo='$echo'
cat='$cat'
rm='$rm'
mv='$mv'
cp='$cp'
tail='$tail'
tr='$tr'
mkdir='$mkdir'
sort='$sort'
uniq='$uniq'
grep='$grep'
trylist='$trylist'
test='$test'
inews='$inews'
egrep='$egrep'
more='$more'
pg='$pg'
Mcc='$Mcc'
vi='$vi'
mailx='$mailx'
mail='$mail'
cpp='$cpp'
perl='$perl'
contains='$contains'
d_index='$d_index'
libc='$libc'
n='$n'
c='$c'
package='$package'
spitshell='$spitshell'
shsharp='$shsharp'
sharpbang='$sharpbang'
startsh='$startsh'
d_flex='$d_flex'
flexcomment='$flexcomment'
d_lex8='$d_lex8'
lex8comment='$lex8comment'
d_perl='$d_perl'
perlcomment='$perlcomment'
perlloc='$perlloc'
dpi='$dpi'
gmw='$gmw'
gmwfontpath='$gmwfontpath'
gmwfonts='$gmwfonts'
gmwfontlist='$gmwfontlist'
jtex='$jtex'
texfontpath='$texfontpath'
jtexfonts='$jtexfonts'
jtexfontlist='$jtexfontlist'
localfont='$localfont'
lw='$lw'
lwfonts='$lwfonts'
lwfontlist='$lwfontlist'
sharp='$sharp'
sharpfontpath='$sharpfontpath'
sharpfonts='$sharpfonts'
sharpfontlist='$sharpfontlist'
sharpoa='$sharpoa'
sharpoafontpath='$sharpoafontpath'
sharpoafonts='$sharpoafonts'
sharpoafontlist='$sharpoafontlist'
x11='$x11'
xfontpath='$xfontpath'
xfonts='$xfonts'
xfontlist='$xfontlist'
CONFIG=true
EOT

CONFIG=true

echo " "
dflt=''
fastread=''
echo "If you didn't make any mistakes, then just type a carriage return here."
rp="If you need to edit config.sh, do it as a shell escape here:"
$echo $n "$rp $c"
. UU/myread
case "$ans" in
'') ;;
*) : in case they cannot read
    eval $ans;;
esac
. ./config.sh

echo " "
echo "Doing variable substitutions on .SH files..."
set x `awk '{print $1}' <MANIFEST | $grep '\.SH'`
shift
case $# in
0) set x *.SH; shift;;
esac
if test ! -f $1; then
    shift
fi
for file in $*; do
    case "$file" in
    */*)
	dir=`$expr X$file : 'X\(.*\)/'`
	file=`$expr X$file : 'X.*/\(.*\)'`
	(cd $dir && . $file)
	;;
    *)
	. $file
	;;
    esac
done
if test -f config.h.SH; then
    if test ! -f config.h; then
	: oops, they left it out of MANIFEST, probably, so do it anyway.
	. config.h.SH
    fi
fi

if $contains '^depend:' Makefile >/dev/null 2>&1; then
    dflt=n
    $cat <<EOM

Now you need to generate make dependencies by running "make depend".
You might prefer to run it in background: "make depend > makedepend.out &"
It can take a while, so you might not want to run it right now.

EOM
    rp="Run make depend now? [$dflt]"
    $echo $n "$rp $c"
    . UU/myread
    case "$ans" in
    y*) make depend
	echo "Now you must run a make."
	;;
    *)  echo "You must run 'make depend' then 'make'."
	;;
    esac
elif test -f Makefile; then
    echo " "
    echo "Now you must run a make."
else
    echo "Done."
fi

$rm -f kit*isdone
: the following is currently useless
cd UU && $rm -f $rmlist
: since this removes it all anyway
cd .. && $rm -rf UU
: end of Configure
